def decode_bits(bits):
# ToDo: Accept 0's and 1's, return dots, dashes and spaces

# convert INT to STR to make it iterable
    bits_string = str(bits)
    
# remove leading and trailing 0s
    bits_string = bits_string.strip('0')
    
# determine time unit
    time_unit = 0
    length = 0
    for i, bit in enumerate(bits_string):
        if i == 0:
            length += 1
            continue
        if bits_string[i] == bits_string[i-1]:
            length += 1
        else:
            if time_unit > length or time_unit == 0:
                time_unit = length
            length = 1
    if time_unit > length or time_unit == 0:
        time_unit = length

    print('time:', time_unit)
    print('bits: ', bits_string)
# replace one time unit of 1s with '.'
    dot = '1'*time_unit
# replace three time units of 1s with '-'
    dash = '1'*3*time_unit
# replace one time unit of 0s with ./- separator 
    sep = '0'*time_unit
# replace three time units of 0s with char separator
    separ = '0'*3*time_unit
# replace seven time units of 0s with word separator
    separator = '0'*7*time_unit
    
    dictionary = {dot: '.', dash: '-', sep: '', separ: ' ', separator: '   ' }
    substring = ''
    output = ''
    for bit in bits_string:
        if len(substring) == 0:
            substring = bit
            continue
        if bit not in substring:
            output += dictionary[substring]
            substring = bit
        else:
            substring += bit
    output += dictionary[substring]
    
    return output

def decode_morse(morseCode):
# ToDo: Accept dots, dashes and spaces, return human-readable message

# output is a STR
    string = ''

# separate input into words
    words = morseCode.split('   ')
    
# separate words into letters
    for word in words:
        letters = word.split(' ')
        word = ''
    
# replace morse code with character
        for letter in letters:
            letter = MORSE_CODE[letter]
            
# add character to output string
            word += letter

        string += word + ' '

    return string[:-1]
